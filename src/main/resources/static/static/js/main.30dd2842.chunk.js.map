{"version":3,"sources":["ApiService.js","upload_file/index.js","App.js","serviceWorker.js","index.js"],"names":["data","axios","post","get","index","onFileChangeHandler","e","console","log","target","files","setState","selectedFile","loaded","onClickHandler","state","formData","FormData","append","ApiService","upload","then","res","alert","this","getFiles","response","list","map","invoice","key","zipFileName","fileName","country","countryCode","className","type","name","onChange","onClick","Table","striped","bordered","hover","size","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+RAae,M,+FARJA,GACH,OAAOC,IAAMC,KAAK,mDAAoDF,K,gCAGtE,OAAOC,IAAME,IAAI,wD,cC+FVC,E,kDAjGX,aAAe,IAAD,8BACV,gBAwBFC,oBAAsB,SAACC,GACrBC,QAAQC,IAAIF,EAAEG,OAAOC,MAAM,IAC3B,EAAKC,SAAS,CACVC,aAAcN,EAAEG,OAAOC,MAAM,GAC7BG,OAAQ,KA7BF,EAmCdC,eAAiB,WACbP,QAAQC,IAAI,0BAA2B,EAAKO,MAAMH,cAClD,IAAMI,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ,EAAKH,MAAMH,cACnCO,EAAWC,OAAOJ,GACbK,MAAK,SAAAC,GACEf,QAAQC,IAAIc,EAAItB,MAChBuB,MAAM,mCAvClB,EAAKR,MAAQ,CACXH,aAAc,GACdC,OAAQ,EACRH,MAAM,IANE,E,gEAUXc,KAAKC,a,iCAIM,IAAD,OACTlB,QAAQC,IAAI,oBAEZP,IAAME,IADI,oDACKkB,MAAK,SAAAK,GAChB,EAAKf,SAAS,CACZD,MAAOgB,EAAS1B,OAElBO,QAAQC,IAAI,aAAa,EAAKO,MAAML,Y,+BAyB1C,IAAIiB,EAeF,OAdFpB,QAAQC,IAAI,OAAOgB,KAAKT,MAAML,OAE9BiB,EAAOH,KAAKT,MAAML,MAAMkB,KAAI,SAACC,EAASzB,GACpC,OACI,wBAAI0B,IAAK1B,GACL,4BAAKyB,EAAQE,aACb,4BAAKF,EAAQG,UACb,4BAAKH,EAAQI,SACb,4BAAKJ,EAAQK,iBAOjB,yBAAKC,UAAU,aACf,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACP,yBAAKA,UAAU,0BACX,oDACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,KAAK,OAAOC,SAAUd,KAAKnB,uBAE3E,4BAAQ+B,KAAK,SAASD,UAAU,4BAA4BI,QAASf,KAAKV,gBAA1E,YAGZ,6BACI,8BAEJ,6BACA,kBAAC0B,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MAC7C,+BACE,4BACI,4CACA,yCAEA,4CACA,8CAGN,+BACGjB,U,GAzFekB,aCMLC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCMcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.30dd2842.chunk.js","sourcesContent":["\nimport axios from 'axios';\n\nclass ApiService {\n\n    upload(data) {\n        return axios.post(\"https://fileuploadamila.herokuapp.com/api/upload\", data);\n    }\n    getFile(){\n        return axios.get(\"https://fileuploadamila.herokuapp.com/api/upload\");\n    }\n}\n\nexport default new ApiService();","import React, { Component } from 'react';\nimport ApiService from '../ApiService';\nimport Table from 'react-bootstrap/Table'\nimport axios from 'axios';\n\nclass index extends Component {\n\n    constructor() {\n        super();\n    \n        this.state = {\n          selectedFile: \"\",\n          loaded: 1,\n          files:[]\n        } \n      }\n      componentDidMount(){\n       this.getFiles();\n          \n      }\n\n      getFiles() {\n        console.log(\"items List start\");\n        let url = \"https://fileuploadamila.herokuapp.com/api/upload\"\n        axios.get(url).then(response => {\n            this.setState({\n              files: response.data\n            });\n            console.log(\"items List\"+this.state.files);\n        });\n    }\n\n      onFileChangeHandler = (e) => {\n        console.log(e.target.files[0])\n        this.setState({\n            selectedFile: e.target.files[0],\n            loaded: 0,\n          })\n    };\n\n    \n\n    onClickHandler = () =>{\n        console.log(\"this.state.selectedFile\"+ this.state.selectedFile);\n        const formData = new FormData();\n        formData.append('file', this.state.selectedFile);\n        ApiService.upload(formData)\n            .then(res => {\n                    console.log(res.data);\n                    alert(\"File uploaded successfully.\")\n            })\n    }\n    render() {\n      let list = [];\n      console.log(\"file\"+this.state.files);\n      // if(this.state.files.size){\n      list = this.state.files.map((invoice, index) => {\n        return (\n            <tr key={index}>\n                <td>{invoice.zipFileName}</td>\n                <td>{invoice.fileName}</td>\n                <td>{invoice.country}</td>\n                <td>{invoice.countryCode}</td>\n            </tr>\n        )\n    });\n  // }\n\n        return (\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                        <div className=\"form-group files color\">\n                            <label>Upload Your File </label>\n                            <input type=\"file\" className=\"form-control\" name=\"file\" onChange={this.onFileChangeHandler}/>\n                        </div>\n                        <button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload</button>\n                </div>\n            </div>\n            <div>\n                <br></br>\n            </div>\n            <div>\n            <Table striped bordered hover size=\"sm\">\n  <thead>\n    <tr>\n        <th>Zip FileName</th>\n        <th>File Name</th>\n        \n        <th>Country name</th>\n        <th>Country code</th>\n    </tr>\n  </thead>\n  <tbody>\n    {list}\n    \n  </tbody>\n</Table>\n</div>\n        </div>\n        );\n    }\n}\n\nexport default index;","import React from 'react';\nimport './App.css';\nimport UploadFiles from './upload_file/index';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UploadFiles />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}